#! /usr/bin/python3

import os
import sys
import time
import numpy as np
sys.path.append("/home/straw/Documents/Spice/orange/src/base_chalo/src")

import rospy

from geometry_msgs.msg import Pose, PoseStamped, Point, Quaternion
from geometry_msgs.msg import Twist
from visualization_msgs.msg import Marker
from std_srvs.srv import Empty
from nav_msgs.msg import Odometry

from agent import agent, actions

actions.linear_vel_range = (0.1, 0.3)
actions.linear_vel_buckets = 5
actions.angular_vel_range = (-0.5, 0.5)
actions.angular_vel_buckets = 5
actions.update()

class driver():
    def __init__(self):
        rospy.init_node("driver")

        self.cmd_pub = rospy.Publisher("/cmd_vel", Twist, queue_size=1)
        self.sphere_pub = rospy.Publisher("/goal", Marker, queue_size=1)

        self.bot = None
        self.goal = None
        self.goal_marker = Marker()
        self.goal_marker.header.frame_id = "odom"
        self.goal_marker.ns = "goal"
        self.goal_marker.id = 0
        self.goal_marker.type = Marker.SPHERE
        self.goal_marker.action = Marker.ADD
        self.goal_marker.color.r = 1
        self.goal_marker.color.g = 0
        self.goal_marker.color.b = 0
        self.goal_marker.color.a = 1

        self.threshold = 1 

        self.agent = agent(
            input_length=4,
            n_actions=len(actions.activity),
            batch_size=64,
            alpha=0.001,
            gamma=0.99,
            epsilon=1,
            reuse=False
        )

        self.decay = 0.9999
        self.return_ = 0
        self.episode = 11

        self.velocity = Twist()
        self.zero_velocity = Twist()
        self.state = None

        self.pause = False
        
        self.odom_sub = rospy.Subscriber("/odom", Odometry, self.get_odom)

    def get_odom(self, odom):
        if (self.pause):
            return 
        self.bot = odom.pose.pose
        if (self.goal is None):
            return 
        dx = self.goal[0] - self.bot.position.x
        dy = self.goal[1] - self.bot.position.y
        new_state = [dx, dy, self.velocity.linear.x, self.velocity.angular.z]
        if (self.state is None):
            self.state = new_state
            return
        reward = -0.5
        action = self.agent.choose_action(self.state)
        v, w = actions.get(action)
        self.velocity.linear.x = v
        self.velocity.angular.z = w
        self.cmd_pub.publish(self.velocity)
        self.agent.store(self.state, new_state, action, reward, 0)
        self.state = new_state

        self.agent.epsilon = self.agent.epsilon * self.decay
        self.return_ += reward

    def reached(self):
        if (self.goal is None): 
            return False
        dx = self.goal[0] - self.bot.position.x
        dy = self.goal[1] - self.bot.position.y
        return dx*dx + dy*dy < self.threshold*self.threshold

    def lost(self, distance):
        if (self.goal is None): 
            return False
        dx = self.goal[0] - self.bot.position.x
        dy = self.goal[1] - self.bot.position.y
        return dx*dx + dy*dy > distance*distance

    def gen_goal(self, distance, theta_range):
        if (self.bot is None):
            return None
        bot_steer = np.arctan2(self.bot.orientation.z, self.bot.orientation.w) * 2
        theta = theta_range[0] + np.random.random()*(theta_range[1] - theta_range[0]) + bot_steer
        dx = distance * np.cos(theta)
        dy = distance * np.sin(theta)
        x = self.bot.position.x + dx
        y = self.bot.position.y + dy
        self.goal_marker.pose.position.x = x
        self.goal_marker.pose.position.y = y
        self.goal_marker.pose.position.z = 0
        self.goal_marker.scale.x = 2*self.threshold
        self.goal_marker.scale.y = 2*self.threshold
        self.goal_marker.scale.z = 2*self.threshold
        return x, y

    def reset_world(self):
        try:
            reset = rospy.ServiceProxy("/gazebo/reset_world", Empty)
            reset()
        except rospy.ServiceException as e:
            print(f"{type(e)}: {e}")

    def mainloop(self):
        while not rospy.is_shutdown():
            try:
                if (self.goal is None):
                    self.goal = self.gen_goal(2, (-0.5, 0.5))
                    continue

                self.sphere_pub.publish(self.goal_marker)

#                 if (self.lost(3)):
#                     self.pause = True
#                     self.velocity = Twist()
#                     self.goal = None
#                     self.agent.memory.data[-1][-1] = 1
#                     self.agent.learn()
#                     print(f"\033[93mepisode: {self.episode} return: {self.return_} exploration: {self.agent.epsilon}\033[0m")
#                     self.episode += 1
#                     self.return_ = 0
#                     self.agent.save("go.pth")
#                     self.pause = False

                reached = self.reached()
                lost = self.lost(3)

                if (reached or lost):
                    self.pause = True
                    self.reset_world()
                    self.velocity = Twist()
                    self.agent.memory.data[-1][-1] = 1
                    self.agent.memory.data[-1][-2] = 1 * reached
                    self.return_ += (1+0.5)*reached
                    self.agent.learn()
                    start = "\033[96m" if reached else "\033[93m"
                    print(f"{start}episode: {self.episode} return: {self.return_} exploration: {self.agent.epsilon}\033[0m")
                    self.episode += 1
                    self.return_ = 0
                    self.agent.save("go.pth")
                    self.goal = self.gen_goal(2, (-0.5, 0.5))
                    self.pause = False
                    
            except KeyboardInterrupt:
                sys.exit(1)


if __name__ == "__main__":
    d = driver()
    d.mainloop()

